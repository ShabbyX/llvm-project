import("//build_overrides/llvm.gni")

import("//${llvm_build_root}/secondary/clang/lib/StaticAnalyzer/Frontend/enable.gni")
import("//${llvm_build_root}/build/write_cmake_config.gni")
import("enable.gni")

config("clang-tidy-config_Config") {
  visibility = [ ":clang-tidy-config" ]
  include_dirs = [ "$target_gen_dir" ]
}

write_cmake_config("clang-tidy-config") {
  input = "clang-tidy-config.h.cmake"
  output = "$target_gen_dir/clang-tidy-config.h"
  values = []

  if (clang_tidy_enable_static_analyzer) {
    values += [ "CLANG_TIDY_ENABLE_STATIC_ANALYZER=1" ]
  } else {
    values += [ "CLANG_TIDY_ENABLE_STATIC_ANALYZER=" ]
  }

  # Let targets depending on this find the generated file.
  public_configs = [ ":clang-tidy-config_Config" ]
}

static_library("clang-tidy") {
  output_name = "clangTidy"
  configs += [ "//${llvm_build_root}/build:clang_code" ]
  deps = [
    ":clang-tidy-config",
    "//${llvm_build_root}/secondary/clang/include/clang/StaticAnalyzer/Checkers",
    "//${llvm_build_root}/secondary/clang/lib/AST",
    "//${llvm_build_root}/secondary/clang/lib/ASTMatchers",
    "//${llvm_build_root}/secondary/clang/lib/Basic",
    "//${llvm_build_root}/secondary/clang/lib/Format",
    "//${llvm_build_root}/secondary/clang/lib/Frontend",
    "//${llvm_build_root}/secondary/clang/lib/Lex",
    "//${llvm_build_root}/secondary/clang/lib/Rewrite",
    "//${llvm_build_root}/secondary/clang/lib/Sema",
    "//${llvm_build_root}/secondary/clang/lib/Serialization",
    "//${llvm_build_root}/secondary/clang/lib/Tooling",
    "//${llvm_build_root}/secondary/clang/lib/Tooling/Core",
    "//${llvm_build_root}/secondary/llvm/lib/Support",
  ]

  if (clang_tidy_enable_static_analyzer) {
    deps += [
      "//${llvm_build_root}/secondary/clang/lib/StaticAnalyzer/Core",
      "//${llvm_build_root}/secondary/clang/lib/StaticAnalyzer/Frontend",
    ]
  }

  sources = [
    "ClangTidy.cpp",
    "ClangTidyCheck.cpp",
    "ClangTidyDiagnosticConsumer.cpp",
    "ClangTidyModule.cpp",
    "ClangTidyOptions.cpp",
    "ClangTidyProfiling.cpp",
    "ExpandModularHeadersPPCallbacks.cpp",
    "GlobList.cpp",
    "NoLintDirectiveHandler.cpp",
  ]
}

group("all-checks") {
  # If you add a check, also add it to ClangTidyForceLinker.h.
  deps = [
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/abseil",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/altera",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/android",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/boost",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/bugprone",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/cert",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/concurrency",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/cppcoreguidelines",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/darwin",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/fuchsia",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/google",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/hicpp",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/linuxkernel",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/llvm",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/llvmlibc",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/misc",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/modernize",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/objc",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/openmp",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/performance",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/portability",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/readability",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/zircon",
  ]
  if (clang_tidy_enable_static_analyzer) {
    deps += [ "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/mpi" ]
  }
}
