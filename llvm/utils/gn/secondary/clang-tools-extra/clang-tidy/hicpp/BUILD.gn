import("//build_overrides/llvm.gni")

static_library("hicpp") {
  output_name = "clangTidyHICPPModule"
  configs += [ "//${llvm_build_root}/build:clang_code" ]
  deps = [
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/bugprone",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/cppcoreguidelines",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/google",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/misc",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/modernize",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/performance",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/readability",
    "//${llvm_build_root}/secondary/clang-tools-extra/clang-tidy/utils",
    "//${llvm_build_root}/secondary/clang/lib/AST",
    "//${llvm_build_root}/secondary/clang/lib/ASTMatchers",
    "//${llvm_build_root}/secondary/clang/lib/Basic",
    "//${llvm_build_root}/secondary/clang/lib/Lex",
    "//${llvm_build_root}/secondary/clang/lib/Serialization",
    "//${llvm_build_root}/secondary/llvm/lib/Support",
  ]
  sources = [
    "ExceptionBaseclassCheck.cpp",
    "HICPPTidyModule.cpp",
    "MultiwayPathsCoveredCheck.cpp",
    "NoAssemblerCheck.cpp",
    "SignedBitwiseCheck.cpp",
  ]
}
