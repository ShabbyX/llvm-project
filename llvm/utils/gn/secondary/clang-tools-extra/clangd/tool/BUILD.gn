import("//build_overrides/llvm.gni")

import("//${llvm_root}clang-tools-extra/clangd/xpc/enable.gni")

executable("clangd") {
  configs += [ "//${llvm_build_root}build:clang_code" ]
  deps = [
    "//${llvm_root}clang-tools-extra/clang-tidy",
    "//${llvm_root}clang-tools-extra/clangd",
    "//${llvm_root}clang-tools-extra/clangd:features",
    "//${llvm_root}clang-tools-extra/clangd/index/remote/unimplemented",
    "//${llvm_root}clang-tools-extra/clangd/refactor/tweaks",
    "//${llvm_root}clang/lib/AST",
    "//${llvm_root}clang/lib/Basic",
    "//${llvm_root}clang/lib/Format",
    "//${llvm_root}clang/lib/Frontend",
    "//${llvm_root}clang/lib/Headers",
    "//${llvm_root}clang/lib/Sema",
    "//${llvm_root}clang/lib/Tooling",
    "//${llvm_root}clang/lib/Tooling/Core",
    "//${llvm_root}llvm/lib/Support",
  ]
  if (clangd_build_xpc) {
    deps += [
      "//${llvm_root}clang-tools-extra/clangd/xpc:conversions",
      "//${llvm_root}clang-tools-extra/clangd/xpc:transport",
    ]
  }

  include_dirs = [
    "..",

    # For "clang-include-cleaner/..." includes.
    "//${llvm_root}clang-tools-extra/include-cleaner/include",
  ]
  sources = [
    "Check.cpp",
    "ClangdMain.cpp",
    "ClangdToolMain.cpp",
  ]
}
