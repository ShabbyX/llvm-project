import("//build_overrides/llvm.gni")

static_library("Frontend") {
  output_name = "clangFrontend"
  configs += [ "//${llvm_build_root}/build:clang_code" ]
  configs += llvm_code_override_configs_append
  configs -= llvm_code_override_configs_remove
  deps = [
    "//${llvm_build_root}/secondary/clang/include/clang/Config",
    "//${llvm_build_root}/secondary/clang/lib/AST",
    "//${llvm_build_root}/secondary/clang/lib/Basic",
    "//${llvm_build_root}/secondary/clang/lib/Driver",
    "//${llvm_build_root}/secondary/clang/lib/Edit",
    "//${llvm_build_root}/secondary/clang/lib/Lex",
    "//${llvm_build_root}/secondary/clang/lib/Parse",
    "//${llvm_build_root}/secondary/clang/lib/Sema",
    "//${llvm_build_root}/secondary/clang/lib/Serialization",
    "//${llvm_build_root}/secondary/llvm/include/llvm/Config:llvm-config",
    "//${llvm_build_root}/secondary/llvm/lib/Bitcode/Reader",
    "//${llvm_build_root}/secondary/llvm/lib/Option",
    "//${llvm_build_root}/secondary/llvm/lib/ProfileData",
    "//${llvm_build_root}/secondary/llvm/lib/Support",
    "//${llvm_build_root}/secondary/llvm/lib/TargetParser",
  ]
  sources = [
    "ASTConsumers.cpp",
    "ASTMerge.cpp",
    "ASTUnit.cpp",
    "ChainedDiagnosticConsumer.cpp",
    "ChainedIncludesSource.cpp",
    "CompilerInstance.cpp",
    "CompilerInvocation.cpp",
    "CreateInvocationFromCommandLine.cpp",
    "DependencyFile.cpp",
    "DependencyGraph.cpp",
    "DiagnosticRenderer.cpp",
    "FrontendAction.cpp",
    "FrontendActions.cpp",
    "FrontendOptions.cpp",
    "HeaderIncludeGen.cpp",
    "InitPreprocessor.cpp",
    "InterfaceStubFunctionsConsumer.cpp",
    "LayoutOverrideSource.cpp",
    "LogDiagnosticPrinter.cpp",
    "ModuleDependencyCollector.cpp",
    "MultiplexConsumer.cpp",
    "PrecompiledPreamble.cpp",
    "PrintPreprocessedOutput.cpp",
    "SARIFDiagnostic.cpp",
    "SARIFDiagnosticPrinter.cpp",
    "SerializedDiagnosticPrinter.cpp",
    "SerializedDiagnosticReader.cpp",
    "TestModuleFileExtension.cpp",
    "TextDiagnostic.cpp",
    "TextDiagnosticBuffer.cpp",
    "TextDiagnosticPrinter.cpp",
    "VerifyDiagnosticConsumer.cpp",
  ]
}
