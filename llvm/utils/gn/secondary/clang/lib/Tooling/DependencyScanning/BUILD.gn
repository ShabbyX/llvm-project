import("//build_overrides/llvm.gni")

static_library("DependencyScanning") {
  output_name = "clangToolingDependencyScanning"
  configs += [ "//${llvm_build_root}/build:clang_code" ]
  configs += llvm_code_override_configs_append
  configs -= llvm_code_override_configs_remove
  deps = [
    "//${llvm_build_root}/secondary/clang/lib/AST",
    "//${llvm_build_root}/secondary/clang/lib/Basic",
    "//${llvm_build_root}/secondary/clang/lib/CodeGen",
    "//${llvm_build_root}/secondary/clang/lib/Driver",
    "//${llvm_build_root}/secondary/clang/lib/Frontend",
    "//${llvm_build_root}/secondary/clang/lib/FrontendTool",
    "//${llvm_build_root}/secondary/clang/lib/Lex",
    "//${llvm_build_root}/secondary/clang/lib/Parse",
    "//${llvm_build_root}/secondary/clang/lib/Serialization",
    "//${llvm_build_root}/secondary/clang/lib/Tooling",
    "//${llvm_build_root}/secondary/llvm/lib/IR",
    "//${llvm_build_root}/secondary/llvm/lib/Support",
    "//${llvm_build_root}/secondary/llvm/lib/Target:TargetsToBuild",
    "//${llvm_build_root}/secondary/llvm/lib/TargetParser",
  ]
  sources = [
    "DependencyScanningFilesystem.cpp",
    "DependencyScanningService.cpp",
    "DependencyScanningTool.cpp",
    "DependencyScanningWorker.cpp",
    "ModuleDepCollector.cpp",
  ]
}
