import("//build_overrides/llvm.gni")

static_library("Expression") {
  output_name = "lldbExpression"
  configs += [ "//${llvm_build_root}/build:lldb_code" ]
  deps = [
    "//${llvm_build_root}/secondary/lldb/source/Core",
    "//${llvm_build_root}/secondary/lldb/source/Host",
    "//${llvm_build_root}/secondary/lldb/source/Interpreter",

    #"//${llvm_build_root}/secondary/lldb/source/Symbol", # FIXME: Dependency cycle.
    #"//${llvm_build_root}/secondary/lldb/source/Target", # FIXME: Dependency cycle.
    "//${llvm_build_root}/secondary/lldb/source/Utility",
    "//${llvm_build_root}/secondary/llvm/lib/ExecutionEngine",
    "//${llvm_build_root}/secondary/llvm/lib/IR",
    "//${llvm_build_root}/secondary/llvm/lib/Support",

    #"//${llvm_build_root}/secondary/lldb/source/Plugins/Language/CPlusPlus", # 4-hop dependency cycle.

    # FIXME:
    # DEPENDS
    # intrinsics_gen
  ]
  include_dirs = [ ".." ]
  sources = [
    "DWARFExpression.cpp",
    "DWARFExpressionList.cpp",
    "DiagnosticManager.cpp",
    "Expression.cpp",
    "ExpressionTypeSystemHelper.cpp",
    "ExpressionVariable.cpp",
    "FunctionCaller.cpp",
    "IRExecutionUnit.cpp",
    "IRInterpreter.cpp",
    "IRMemoryMap.cpp",
    "LLVMUserExpression.cpp",
    "Materializer.cpp",
    "ObjectFileJIT.cpp",
    "REPL.cpp",
    "UserExpression.cpp",
    "UtilityFunction.cpp",
  ]
}
