import("//build_overrides/llvm.gni")

import("//${llvm_root}llvm/lib/Target/targets.gni")
import("//${llvm_build_root}build/write_cmake_config.gni")

# In the CMake build, each plugin calls `add_lldb_library(name PLUGIN ...)`,
# which implicitly adds the plugin name to the LLDB_PLUGINS list.
# A few places then query that list and add dependencies on it.
# lldb/source/Plugins/CMakeList.txt then does string munging on the list of
# plugin names to generate Plugins.def.
# In the GN build, we instead have an explicit list of all plugins here.
# Every entry in this list is a (GN target, LLDB_PLUGIN Plugins.def name) pair.
lldb_plugins = []
if (llvm_build_X86) {
  lldb_plugins += [ [
        "//${llvm_root}lldb/source/Plugins/ABI/X86",
        "ABIX86",
      ] ]
}
lldb_plugins += [
  [
    "//${llvm_root}lldb/source/Plugins/Architecture/PPC64",
    "ArchitecturePPC64",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/Disassembler/LLVMC",
    "DisassemblerLLVMC",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/DynamicLoader/Darwin-Kernel",
    "DynamicLoaderDarwinKernel",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/DynamicLoader/MacOSX-DYLD",
    "DynamicLoaderMacOSXDYLD",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/DynamicLoader/POSIX-DYLD",
    "DynamicLoaderPosixDYLD",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/DynamicLoader/Static",
    "DynamicLoaderStatic",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/DynamicLoader/Windows-DYLD",
    "DynamicLoaderWindowsDYLD",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/Instruction/ARM",
    "InstructionARM",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/JITLoader/GDB",
    "JITLoaderGDB",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/Language/CPlusPlus",
    "CPlusPlusLanguage",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/Language/ObjC",
    "ObjCLanguage",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/Language/ObjCPlusPlus",
    "ObjCPlusPlusLanguage",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/LanguageRuntime/CPlusPlus/ItaniumABI",
    "CXXItaniumABI",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/LanguageRuntime/ObjC/AppleObjCRuntime",
    "AppleObjCRuntime",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/ObjectContainer/BSD-Archive",
    "ObjectContainerBSDArchive",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/ObjectContainer/Universal-Mach-O",
    "ObjectContainerMachOArchive",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/ObjectFile/Breakpad",
    "ObjectFileBreakpad",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/ObjectFile/ELF",
    "ObjectFileELF",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/ObjectFile/Mach-O",
    "ObjectFileMachO",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/ObjectFile/PDB",
    "ObjectFilePDB",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/ObjectFile/PECOFF",
    "ObjectFilePECOFF",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/ObjectFile/Placeholder",
    "ObjectFilePlaceholder",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/ObjectFile/wasm",
    "ObjectFileWasm",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/Platform/Linux",
    "PlatformLinux",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/Platform/MacOSX",
    "PlatformMacOSX",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/Platform/Windows",
    "PlatformWindows",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/Process/elf-core",
    "ProcessElfCore",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/Process/gdb-remote",
    "",  # Uses LLDB_PROCESS_GDB_PLUGIN instead.
  ],
  [
    "//${llvm_root}lldb/source/Plugins/Process/mach-core",
    "ProcessMachCore",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/Process/minidump",
    "ProcessMinidump",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/REPL/Clang",
    "ClangREPL",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/ScriptInterpreter/None",
    "",  # Uses LLDB_SCRIPT_PLUGIN instead.
  ],
  [
    "//${llvm_root}lldb/source/Plugins/SymbolFile/Breakpad",
    "SymbolFileBreakpad",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/SymbolFile/DWARF",
    "SymbolFileDWARF",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/SymbolFile/PDB",
    "SymbolFilePDB",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/SymbolFile/Symtab",
    "SymbolFileSymtab",
  ],
]
if (current_os == "mac") {
  lldb_plugins += [ [
        "//${llvm_root}lldb/source/Plugins/SymbolVendor/MacOSX",
        "SymbolVendorMacOSX",
      ] ]
}
lldb_plugins += [
  [
    "//${llvm_root}lldb/source/Plugins/SymbolVendor/ELF",
    "SymbolVendorELF",
  ],

  [
    "//${llvm_root}lldb/source/Plugins/SymbolVendor/wasm",
    "SymbolVendorWasm",
  ],

  [
    "//${llvm_root}lldb/source/Plugins/SymbolVendor/PECOFF",
    "SymbolVendorPECOFF",
  ],

  [
    "//${llvm_root}lldb/source/Plugins/TypeSystem/Clang",
    "TypeSystemClang",
  ],

  [
    "//${llvm_root}lldb/source/Plugins/UnwindAssembly/InstEmulation",
    "UnwindAssemblyInstEmulation",
  ],
  [
    "//${llvm_root}lldb/source/Plugins/UnwindAssembly/x86",
    "UnwindAssemblyX86",
  ],
]

write_cmake_config("Plugins.def") {
  input = "Plugins.def.in"
  output = "$target_gen_dir/Plugins.def"

  enum_plugins = ""
  foreach(plugin, lldb_plugins) {
    plugin_id = plugin[1]
    if (plugin_id != "") {
      # \n is a literal '\' followed by a literal 'n', not a newline character.
      # write_cmake_config.py replaces it with a real newline.
      enum_plugins += "LLDB_PLUGIN(" + plugin_id + ")\n"
    }
  }

  deps = [ "//${llvm_root}lldb/source/Plugins/ScriptInterpreter/None" ]
  enum_plugins += "LLDB_SCRIPT_PLUGIN(ScriptInterpreterNone)"

  values = [ "LLDB_ENUM_PLUGINS=" + enum_plugins ]

  # These are in separate variables to make sure ProcessWindowsCommon is
  # initalized after all plugins, but before ProcessGDBRemote.
  if (current_os == "win") {
    values +=
        [ "LLDB_PROCESS_WINDOWS_PLUGIN=LLDB_PLUGIN(ProcessWindowsCommon)" ]
  } else {
    values += [ "LLDB_PROCESS_WINDOWS_PLUGIN=" ]
  }
  values += [ "LLDB_PROCESS_GDB_PLUGIN=LLDB_PLUGIN(ProcessGDBRemote)" ]
}

config("AllLldbPlugins_config") {
  visibility = [ ":LldbAllPlugins" ]

  # To pick up Plugins.def.
  include_dirs = [ "$root_gen_dir/lldb/source" ]
}

group("LldbAllPlugins") {
  deps = [ ":Plugins.def" ]
  foreach(plugin, lldb_plugins) {
    deps += [ plugin[0] ]
  }
  public_configs = [ ":AllLldbPlugins_config" ]
}
