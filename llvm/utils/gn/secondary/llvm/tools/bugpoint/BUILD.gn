import("//build_overrides/llvm.gni")

executable("bugpoint") {
  deps = [
    "//${llvm_root}llvm/include/llvm/Config:config",
    "//${llvm_root}llvm/include/llvm/Config:llvm-config",
    "//${llvm_root}llvm/lib/Analysis",
    "//${llvm_root}llvm/lib/Bitcode/Writer",
    "//${llvm_root}llvm/lib/CodeGen",
    "//${llvm_root}llvm/lib/IR",
    "//${llvm_root}llvm/lib/IRReader",
    "//${llvm_root}llvm/lib/Linker",
    "//${llvm_root}llvm/lib/Support",
    "//${llvm_root}llvm/lib/Target",
    "//${llvm_root}llvm/lib/Target:TargetsToBuild",
    "//${llvm_root}llvm/lib/TargetParser",
    "//${llvm_root}llvm/lib/Transforms/AggressiveInstCombine",
    "//${llvm_root}llvm/lib/Transforms/IPO",
    "//${llvm_root}llvm/lib/Transforms/Instrumentation",
    "//${llvm_root}llvm/lib/Transforms/ObjCARC",
    "//${llvm_root}llvm/lib/Transforms/Scalar",
    "//${llvm_root}llvm/lib/Transforms/Utils",
    "//${llvm_root}llvm/lib/Transforms/Vectorize",
  ]
  sources = [
    "BugDriver.cpp",
    "CrashDebugger.cpp",
    "ExecutionDriver.cpp",
    "ExtractFunction.cpp",
    "FindBugs.cpp",
    "Miscompilation.cpp",
    "OptimizerDriver.cpp",
    "ToolRunner.cpp",
    "bugpoint.cpp",
  ]

  # Support plugins.
  # FIXME: Disable dead stripping once other binaries are dead-stripped.
  if (host_os != "mac" && host_os != "win") {
    # Make sure bugpoint plugins can access bugpoint's symbols.
    # Corresponds to export_executable_symbols() in cmake.
    ldflags = [ "-rdynamic" ]
  }
}
