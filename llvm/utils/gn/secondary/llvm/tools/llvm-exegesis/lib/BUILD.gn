import("//build_overrides/llvm.gni")

import("//${llvm_build_root}/secondary/llvm/lib/Target/targets.gni")
import("//${llvm_build_root}/secondary/llvm/lib/Target/targets_with_exegesis.gni")

static_library("lib") {
  output_name = "LLVMExegesis"
  deps = [
    "//${llvm_build_root}/secondary/llvm/lib/Analysis",
    "//${llvm_build_root}/secondary/llvm/lib/CodeGen",
    "//${llvm_build_root}/secondary/llvm/lib/CodeGen/GlobalISel",
    "//${llvm_build_root}/secondary/llvm/lib/ExecutionEngine",
    "//${llvm_build_root}/secondary/llvm/lib/ExecutionEngine/MCJIT",
    "//${llvm_build_root}/secondary/llvm/lib/IR",
    "//${llvm_build_root}/secondary/llvm/lib/MC",
    "//${llvm_build_root}/secondary/llvm/lib/MCA",
    "//${llvm_build_root}/secondary/llvm/lib/Object",
    "//${llvm_build_root}/secondary/llvm/lib/ObjectYAML",
    "//${llvm_build_root}/secondary/llvm/lib/Support",
    "//${llvm_build_root}/secondary/llvm/lib/TargetParser",
  ]
  sources = [
    "Analysis.cpp",
    "Assembler.cpp",
    "BenchmarkResult.cpp",
    "BenchmarkRunner.cpp",
    "Clustering.cpp",
    "CodeTemplate.cpp",
    "DisassemblerHelper.cpp",
    "Error.cpp",
    "LatencyBenchmarkRunner.cpp",
    "LlvmState.cpp",
    "MCInstrDescView.cpp",
    "ParallelSnippetGenerator.cpp",
    "PerfHelper.cpp",
    "RegisterAliasing.cpp",
    "RegisterValue.cpp",
    "SchedClassResolution.cpp",
    "SerialSnippetGenerator.cpp",
    "SnippetFile.cpp",
    "SnippetGenerator.cpp",
    "SnippetRepetitor.cpp",
    "SubprocessMemory.cpp",
    "Target.cpp",
    "UopsBenchmarkRunner.cpp",
  ]

  deps += targets_with_exegesis
}
